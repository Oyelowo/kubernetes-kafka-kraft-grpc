version: "3"

services:
  api:
    build:
      context: ./modules/api
      dockerfile: Dockerfile
    #command: ["flask", "run", "--host=0.0.0.0"]
    image: api
    # networks:
    #   - microservices
    volumes:
      - ./api:/backend
    environment:
      - API_PERSON_HOST=api_person
      - FLASK_ENV=development
      - FLASK_APP=app.py
    ports:
      - "30001:5000"

  api_person:
    build:
      context: ./modules/api_person/
      dockerfile: Dockerfile
    #command: ["python3", "./app/app.py"]
    image: api_person
    # networks:
    #   - microservices
    environment:
      - DB_USERNAME=ct_admin
      - DB_NAME=geoconnections
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_PASSWORD=wowimsosecure%
      #- FLASK_ENV=development
      #- FLASK_APP=app.py
    ports:
      - "50051:50051"

  postgres:
    image: postgis/postgis:12-2.5-alpine
    container_name: postgres-container
    ports:
      - "5432:5432"
      # - 5432:5432/tcp
    environment:
      - POSTGRES_USER=ct_admin
      - POSTGRES_PASSWORD=wowimsosecure%
      - POSTGRES_DB=geoconnections
      # DB_USERNAME: "ct_admin"
      # DB_NAME: "geoconnections"
      # DB_HOST: "postgres"
      # DB_PORT: "5432"
      # DB_PASSWORD: wowimsosecure%
    volumes:
      - /var/lib/postgres
      - dbscripts:/docker-entrypoint-initdb.d

  client:
    tty: true
    build:
      context: ./modules/frontend
      dockerfile: Dockerfile
    command: ["npm", "start"]
    # networks:
    #   - microservices
    volumes:
      - ./client:/frontend
      - dbscripts:/frontend/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - '3000:3000'
    depends_on:
      - api

  kafka-kraft:
    build:
      context: ./kraft-mode-kafka-on-kubernetes-main/docker/
      dockerfile: Dockerfile
    environment:
      - REPLICAS='3'
      - SERVICE=kafka-svc
      - NAMESPACE=kafka-kraft
      - SHARE_DIR=/mnt/kafka
      #- FLASK_ENV=development
      #- FLASK_APP=app.py
    ports:
      - "9092:9092"
    volumes:
      - dbscripts:/mnt/kafka

# networks:
#   microservices:
volumes:
  # node-modules:
  dbscripts:
  # kafka-db:
    # external: false
